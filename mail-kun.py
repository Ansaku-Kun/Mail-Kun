import base64
exec(base64.b64decode('IyB1c2UgcHl0aG9uMyB5YSBicm8KCnRyeToKCWltcG9ydCByZXF1ZXN0cyBhcyByLCByYW5kb20sIGpzb24sIG9zCglmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOgoJZXhpdCgiWyFdIE1vZHVsZSBub3QgaW5zdGFsbGVkIikKCmxpc3RfbWFpbCA9IFsidmludG9tYXBlci5jb20iLCJ0b3Zpbml0LmNvbSIsIm1lbnRvbml0Lm5ldCJdCnVybCA9ICJodHRwczovL2NyeXB0b2dtYWlsLmNvbS8iCm51bSA9IDAKCmRlZiBnZXRfdGVrcyhhY2NlcHQsIGtleSk6CgljZWsgPSByLmdldCh1cmwrImFwaS9lbWFpbHMvIitrZXksIGhlYWRlcnM9eyJhY2NlcHQiOiBhY2NlcHR9KS50ZXh0CglpZiAiZXJyb3IiIGluIGNlazoKCQlyZXR1cm4gIi0iCgllbHNlOgoJCXJldHVybiBjZWsuc3RyaXAoKQoKZGVmIGdldF9yYW5kb20oZGlnaXQpOgoJbGlzID0gbGlzdCgiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IikKCWRpZyA9IFtyYW5kb20uY2hvaWNlKGxpcykgZm9yIF8gaW4gcmFuZ2UoZGlnaXQpXQoJcmV0dXJuICIiLmpvaW4oZGlnKSwgcmFuZG9tLmNob2ljZShsaXN0X21haWwpCgpkZWYgYW5pbWF0ZSh0ZWtzKToKCWxpcyA9IGxpc3QoIlx8Ly0iKQoJZm9yIGN5IGluIGxpczoKCQlwcmludCgiXHJbIitjeSsiXSAiK3N0cih0ZWtzKSsiLi4gIiwgZW5kPSIiKQoJCXNsZWVwKDAuNSkKCmRlZiBydW4oZW1haWwpOgoJd2hpbGUgVHJ1ZToKCQl0cnk6CgkJCWFuaW1hdGUoIk1lbnVuZ2d1IFBlc2FuIikKCQkJcmF1biA9IHIuZ2V0KHVybCsiYXBpL2VtYWlscz9pbmJveD0iK2VtYWlsKS50ZXh0CgkJCWlmICI0MDQiIGluIHJhdW46CgkJCQljb250aW51ZQoJCQllbGlmICJkYXRhIiBpbiByYXVuOgoJCQkJeiA9IGpzb24ubG9hZHMocmF1bikKCQkJCWZvciBkYXRhIGluIHpbImRhdGEiXToKCQkJCQlwcmludCgiXHJb4oCiXSBJRDogIitkYXRhWyJpZCJdLCBlbmQ9IlxuIikKCQkJCQlnb3QgPSBqc29uLmxvYWRzKHIuZ2V0KHVybCsiYXBpL2VtYWlscy8iK2RhdGFbImlkIl0pLnRleHQpCgkJCQkJcGVuZ2lyaW0gPSBnb3RbImRhdGEiXVsic2VuZGVyIl1bImRpc3BsYXlfbmFtZSJdCgkJCQkJZW1haWxfcGUgPSBnb3RbImRhdGEiXVsic2VuZGVyIl1bImVtYWlsIl0KCQkJCQlzdWJqZWN0ICA9IGdvdFsiZGF0YSJdWyJzdWJqZWN0Il0KCQkJCQlwcmludCgiXHJb4oCiXSBOYW1hIHBlbmdpcmltOiAiK3BlbmdpcmltLCBlbmQ9IlxuIikKCQkJCQlwcmludCgiXHJb4oCiXSBFbWFpbCBwZW5naXJpbTogIitlbWFpbF9wZSwgZW5kPSJcbiIpCgkJCQkJcHJpbnQoIlxyW+KAol0gU3ViamVrICAgIDogIitzdWJqZWN0LCBlbmQ9IlxuIikKCQkJCQlwcmludCgiXHJb4oCiXSBQZXNhbiAgICA6ICIrZ2V0X3Rla3MoInRleHQvaHRtbCx0ZXh0L3BsYWluIixkYXRhWyJpZCJdKSwgZW5kPSJcbiIpCgkJCQkJYXRjID0gZ290WyJkYXRhIl1bImF0dGFjaG1lbnRzIl0KCQkJCQlpZiBhdGMgPT0gW106CgkJCQkJCXByaW50KCJcclvigKJdIExhbXBpcmFuOiAtIiwgZW5kPSJcbiIpCgkJCQkJZWxzZToKCQkJCQkJcHJpbnQoIlvigKJdIExhbXBpcmFuOiAiKQoJCQkJCQlmb3IgYXRjaCBpbiBhdGM6CgkJCQkJCQlpZCA9IGF0Y2hbImlkIl0KCQkJCQkJCW5hbWUgPSBhdGNoWyJmaWxlX25hbWUiXQoJCQkJCQkJbmFtZSA9IG5hbWUuc3BsaXQoIi4iKVstMV0KCQkJCQkJCXN2ZWUgPSByLmdldCgiaHR0cHM6Ly9jcnlwdG9nbWFpbC5jb20vYXBpL2VtYWlscy8iK2RhdGFbImlkIl0rIi9hdHRhY2htZW50cy8iK2lkKQoJCQkJCQkJb3BlbihpZCsiLiIrbmFtZSwgIndiIikud3JpdGUoc3ZlZS5jb250ZW50KQoJCQkJCQkJcHJpbnQoIiAgICAgIH4gIitpZCsiLiIrbmFtZSkKCQkJCQlwcmludCgiLSIqNDUpCgkJCQkJci5kZWxldGUodXJsKyJhcGkvZW1haWxzLyIrZGF0YVsiaWQiXSkKCQkJCWNvbnRpbnVlCgkJCWVsc2U6CgkJCQljb250aW51ZQoJCWV4Y2VwdCAoS2V5Ym9hcmRJbnRlcnJ1cHQsRU9GRXJyb3IpOgoJCQkJZXhpdCgiXG5b4pyTXSBLZWx1YXIsIGphbGFua2FuIGxhZ2kgcGVyaW50YWhueWEuLi5cbiIpCgpkZWYgY2VrX3VwZGF0ZSh2ZXJzaW9uKToKCWNoZWNrID0gci5nZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9oZWtlbHByby90ZW1wLW1haWwvbWFpbi9fX3ZlcnNpb25fXyIpLnRleHQuc3RyaXAoKQoJaWYgZmxvYXQodmVyc2lvbikgPCBmbG9hdChjaGVjayk6CgkJcHJpbnQoIlvinJNdIFVwZGF0ZSB0ZXJzZWRpYSAuLlxuIikKCQlvcy5zeXN0ZW0oImdpdCBwdWxsIikKCQltYWluKCkKCWVsc2U6CgkJcHJpbnQoIlvDl10gVXBkYXRlIHRpZGFrIHRlcnNlZGlhLCBrZW1iYWxpIGtlIG1lbnUiKQoJCXNsZWVwKDIpCgkJbWFpbigpCgpkZWYgbWFpbigpOgoJb3Muc3lzdGVtKCdjbGVhcicpCglnbG9iYWwgbnVtCglwcmludCgiIiIKICAgIF9fICBfX18gICAgICBfIF9fICAgICAgX18gX18KICAgLyAgfC8gIC9fX18gXyhfKSAvICAgICAvIC8vXy9fICBfX19fX18KICAvIC98Xy8gLyBfXyBgLyAvIC9fX19fXy8gLDwgLyAvIC8gLyBfXyBcICBBdXRob3I6IEFuc2FrdS1LdW4KIC8gLyAgLyAvIC9fLyAvIC8gL19fX19fLyAvfCAvIC9fLyAvIC8gLyAvICBHaXRodWI6IGdpdGh1Yi5jb20vQW5zYWt1LUt1bgovXy8gIC9fL1xfXyxfL18vXy8gICAgIC9fLyB8X1xfXyxfL18vIC9fLwoKCuKeozEuIEJ1YXQgRW1haWwgUmFuZG9tCuKeozIuIEJ1YXQgRW1haWwgQ3VzdG9tIArinqMzLiBDZWsgVXBkYXRlIArinqM0LiBLZWx1YXIKIiIiKQoKCXBpbCA9IGlucHV0KCLinqXinqXinqMgUGlsaWg6ICIpCgl3aGlsZSBwaWwgPT0gIiIgb3Igbm90IHBpbC5pc2RpZ2l0KCk6CgkJcGlsID0gaW5wdXQoIuKepeKepeKeoyBQaWxpaDogIikKCWlmIHBpbCBpbiBbIjAxIiwiMSJdOgoJCXNldF9uYW1lLCBzZXRfZW1haWwgPSBnZXRfcmFuZG9tKDEwKQoJCXByaW50KCJcbls+XSBFbWFpbE11OiAiK3NldF9uYW1lKyJAIitzZXRfZW1haWwpCgkJcHJpbnQoIls+XSBDVFJMKyBDIFVudHVrIFN0b3AuLiIpCgkJcHJpbnQoIi0iKjQ1KQoJCXJ1bihzZXRfbmFtZSsiQCIrc2V0X2VtYWlsKQoJZWxpZiBwaWwgaW4gWyIwMiIsIjIiXToKCQlzZXRfbmFtZSA9IGlucHV0KCJbPl0gQnVhdCBuYW1hIGVtYWlsOiAiKQoJCXByaW50KCkKCQlmb3IgY3kgaW4gbGlzdF9tYWlsOgoJCQludW0gKz0gMQoJCQlwcmludCgiICIqNSwiWyIrc3RyKG51bSkrIl0gQCIrY3kpCgkJcHJpbnQoKQoJCXNldF9lbWFpbCA9IGlucHV0KCLinqXinqXinqMgUGlsaWg6ICIpCgkJd2hpbGUgc2V0X2VtYWlsID09ICIiIG9yIG5vdCBzZXRfZW1haWwuaXNkaWdpdCgpIG9yIGludChzZXRfZW1haWwpID4gbGVuKGxpc3RfbWFpbCk6CgkJCXNldF9lbWFpbCA9IGlucHV0KCLinqXinqXinqMgUGlsaWg6ICIpCgkJbWFpbCA9IGxpc3RfbWFpbFtpbnQoc2V0X2VtYWlsKS0xXQoJCXByaW50KCJcbls+XSBFbWFpbG11OiAiK3NldF9uYW1lKyJAIittYWlsKQoJCXByaW50KCJbPl0gQ1RSTCsgQyBVbnR1ayBTdG9wLi4iKQoJCXByaW50KCItIio0NSkKCQlydW4oc2V0X25hbWUrIkAiK21haWwpCgllbGlmIHBpbCBpbiBbIjAzIiwiMyJdOgoJCXRyeToKCQkJdmVyc2kgPSBvcGVuKCJfX3ZlcnNpb25fXyIsInIiKS5yZWFkKCkuc3RyaXAoKQoJCWV4Y2VwdDoKCQkJcHJpbnQoIlshXSBUaWRhayBhZGEgdXBkYXRlLi4iKQoJCQlzbGVlcCgyKQoJCQltYWluKCkKCQlwcmludCgiWyFdIFR1bmdndSBTZWJlbnRhciIpCgkJY2VrX3VwZGF0ZSh2ZXJzaSkKCWVsaWYgcGlsIGluIFsiMDQiLCI0Il06CgkJZXhpdCgiWz1dIEtlbHVhciwgamFuZ2FuIGx1cGEgbmdvcGlcbiIpCgllbHNlOgoJCWV4aXQoIlstXSBNZW51IHRpZGFrIHRlcnNlZGlhLCBrZWx1YXIuLlxuIikKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgoJbWFpbigpCg=='))