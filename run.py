import base64
exec(base64.b64decode('IyBjb2Rpbmc6dXRmLTgKIy91c3IvYmluL3B5dGhvbgoKdHJ5OgoJaW1wb3J0IHJlcXVlc3RzIGFzIHIsIHJhbmRvbSwganNvbiwgb3MKCWZyb20gdGltZSBpbXBvcnQgc2xlZXAKZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6CglleGl0KCJbIV0gTW9kdWxlIG5vdCBpbnN0YWxsZWQiKQoKbGlzdF9tYWlsID0gWyJ2aW50b21hcGVyLmNvbSIsInRvdmluaXQuY29tIiwibWVudG9uaXQubmV0Il0KdXJsID0gImh0dHBzOi8vY3J5cHRvZ21haWwuY29tLyIKbnVtID0gMAoKUiA9ICJcMDMzWzE7MzFtIgpHID0gIlwwMzNbMTszMm0iClkgPSAiXDAzM1sxOzMzbSIKQiA9ICJcMDMzWzE7MzRtIgpDID0gIlwwMzNbMTszNm0iClcgPSAiXDAzM1sxOzM3bSIKUCA9ICJcMDMzWzE7OTdtIgojd2FybmEgbmdhYgpIaWphdT0iXDAzM1sxOzkybSIKcHV0aWg9IlwwMzNbMTs5N20iCmFidT0iXDAzM1sxOzkwbSIKa3VuaW5nPSJcMDMzWzE7OTNtIgp1bmd1PSJcMDMzWzE7OTVtIgptZXJhaD0iXDMzWzM3OzFtIgpiaXJ1PSJcMDMzWzE7OTZtIgojVHVsaXNhbiBCYWNrZ3JvdW5kIE1lcmFoCmJnPSJcMDMzWzE7MG1cMDMzWzE7NDFtVGV4dFwwMzNbMTswbSIKCmRlZiBnZXRfdGVrcyhhY2NlcHQsIGtleSk6CgljZWsgPSByLmdldCh1cmwrImFwaS9lbWFpbHMvIitrZXksIGhlYWRlcnM9eyJhY2NlcHQiOiBhY2NlcHR9KS50ZXh0CglpZiAiZXJyb3IiIGluIGNlazoKCQlyZXR1cm4gIi0iCgllbHNlOgoJCXJldHVybiBjZWsuc3RyaXAoKQoKZGVmIGdldF9yYW5kb20oZGlnaXQpOgoJbGlzID0gbGlzdCgiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IikKCWRpZyA9IFtyYW5kb20uY2hvaWNlKGxpcykgZm9yIF8gaW4gcmFuZ2UoZGlnaXQpXQoJcmV0dXJuICIiLmpvaW4oZGlnKSwgcmFuZG9tLmNob2ljZShsaXN0X21haWwpCgpkZWYgYW5pbWF0ZSh0ZWtzKToKCWxpcyA9IGxpc3QoIlx8Ly0iKQoJZm9yIGN5IGluIGxpczoKCQlwcmludCgiXHJbIitjeSsiXSAiK3N0cih0ZWtzKSsiLi4gIiwgZW5kPSIiKQoJCXNsZWVwKDAuNSkKCmRlZiBydW4oZW1haWwpOgoJd2hpbGUgVHJ1ZToKCQl0cnk6CgkJCWFuaW1hdGUoIk1lbnVuZ2d1IFBlc2FuIikKCQkJcmF1biA9IHIuZ2V0KHVybCsiYXBpL2VtYWlscz9pbmJveD0iK2VtYWlsKS50ZXh0CgkJCWlmICI0MDQiIGluIHJhdW46CgkJCQljb250aW51ZQoJCQllbGlmICJkYXRhIiBpbiByYXVuOgoJCQkJeiA9IGpzb24ubG9hZHMocmF1bikKCQkJCWZvciBkYXRhIGluIHpbImRhdGEiXToKCQkJCQlwcmludCgiXHJb4oCiXSBJRDogIitkYXRhWyJpZCJdLCBlbmQ9IlxuIikKCQkJCQlnb3QgPSBqc29uLmxvYWRzKHIuZ2V0KHVybCsiYXBpL2VtYWlscy8iK2RhdGFbImlkIl0pLnRleHQpCgkJCQkJcGVuZ2lyaW0gPSBnb3RbImRhdGEiXVsic2VuZGVyIl1bImRpc3BsYXlfbmFtZSJdCgkJCQkJZW1haWxfcGUgPSBnb3RbImRhdGEiXVsic2VuZGVyIl1bImVtYWlsIl0KCQkJCQlzdWJqZWN0ICA9IGdvdFsiZGF0YSJdWyJzdWJqZWN0Il0KCQkJCQlwcmludCgiXHJb4oCiXSBOYW1hIHBlbmdpcmltOiAiK3BlbmdpcmltLCBlbmQ9IlxuIikKCQkJCQlwcmludCgiXHJb4oCiXSBFbWFpbCBwZW5naXJpbTogIitlbWFpbF9wZSwgZW5kPSJcbiIpCgkJCQkJcHJpbnQoIlxyW+KAol0gU3ViamVrICAgIDogIitzdWJqZWN0LCBlbmQ9IlxuIikKCQkJCQlwcmludCgiXHJb4oCiXSBQZXNhbiAgICA6ICIrZ2V0X3Rla3MoInRleHQvaHRtbCx0ZXh0L3BsYWluIixkYXRhWyJpZCJdKSwgZW5kPSJcbiIpCgkJCQkJYXRjID0gZ290WyJkYXRhIl1bImF0dGFjaG1lbnRzIl0KCQkJCQlpZiBhdGMgPT0gW106CgkJCQkJCXByaW50KCJcclvigKJdIExhbXBpcmFuOiAtIiwgZW5kPSJcbiIpCgkJCQkJZWxzZToKCQkJCQkJcHJpbnQoIlvigKJdIExhbXBpcmFuOiAiKQoJCQkJCQlmb3IgYXRjaCBpbiBhdGM6CgkJCQkJCQlpZCA9IGF0Y2hbImlkIl0KCQkJCQkJCW5hbWUgPSBhdGNoWyJmaWxlX25hbWUiXQoJCQkJCQkJbmFtZSA9IG5hbWUuc3BsaXQoIi4iKVstMV0KCQkJCQkJCXN2ZWUgPSByLmdldCgiaHR0cHM6Ly9jcnlwdG9nbWFpbC5jb20vYXBpL2VtYWlscy8iK2RhdGFbImlkIl0rIi9hdHRhY2htZW50cy8iK2lkKQoJCQkJCQkJb3BlbihpZCsiLiIrbmFtZSwgIndiIikud3JpdGUoc3ZlZS5jb250ZW50KQoJCQkJCQkJcHJpbnQoIiAgICAgIH4gIitpZCsiLiIrbmFtZSkKCQkJCQlwcmludCgiLSIqNDUpCgkJCQkJci5kZWxldGUodXJsKyJhcGkvZW1haWxzLyIrZGF0YVsiaWQiXSkKCQkJCWNvbnRpbnVlCgkJCWVsc2U6CgkJCQljb250aW51ZQoJCWV4Y2VwdCAoS2V5Ym9hcmRJbnRlcnJ1cHQsRU9GRXJyb3IpOgoJCQkJZXhpdCgiXG5b4pyTXSBLZWx1YXIsIGphbGFua2FuIGxhZ2kgcGVyaW50YWhueWEuLi5cbiIpCgpkZWYgY2VrX3VwZGF0ZSh2ZXJzaW9uKToKCWNoZWNrID0gci5nZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9oZWtlbHByby90ZW1wLW1haWwvbWFpbi9fX3ZlcnNpb25fXyIpLnRleHQuc3RyaXAoKQoJaWYgZmxvYXQodmVyc2lvbikgPCBmbG9hdChjaGVjayk6CgkJcHJpbnQoIlvinJNdIFVwZGF0ZSB0ZXJzZWRpYSAuLlxuIikKCQlvcy5zeXN0ZW0oImdpdCBwdWxsIikKCQltYWluKCkKCWVsc2U6CgkJcHJpbnQoIlvDl10gVXBkYXRlIHRpZGFrIHRlcnNlZGlhLCBrZW1iYWxpIGtlIG1lbnUiKQoJCXNsZWVwKDIpCgkJbWFpbigpCgpkZWYgbWFpbigpOgoJb3Muc3lzdGVtKCdjbGVhcicpCglnbG9iYWwgbnVtCglwcmludCgiIiIgClwwMzNbMTs5MW0gICAgICAgIF9fICBfX18gICAgICBfIF9fICAgICAgX18gX18KXDAzM1sxOzkybSAgICAgICAvICB8LyAgL19fXyBfKF8pIC8gICAgIC8gLy9fL18gIF9fX19fXwpcMDMzWzE7OTNtICAgICAgLyAvfF8vIC8gX18gYC8gLyAvX19fX18vICw8IC8gLyAvIC8gX18gXCAgClwwMzNbMTs5NG0gICAgIC8gLyAgLyAvIC9fLyAvIC8gL19fX19fLyAvfCAvIC9fLyAvIC8gLyAvICAKXDAzM1sxOzk1bSAgICAvXy8gIC9fL1xfXyxfL18vXy8gICAgIC9fLyB8X1xfXyxfL18vIC9fLwoKXDAzM1szMzsxbeKVlOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVlwpcMDMzWzMzOzFt4pWRICBcMDMzWzMyOzFtIFvigKJdIEF1dGhvdXIgOiBBbnNha3UtS3VuICAgICAgICAgICAgICAgICAgICBcMDMzWzMzOzFtIOKVkQpcMDMzWzMzOzFt4pWRICBcMDMzWzMyOzFtIFvigKJdIEdpdGh1YiAgOiBnaXRodWIuY29tL0Fuc2FrdS1LdW4gICAgICAgICBcMDMzWzMzOzFtIOKVkQpcMDMzWzMzOzFt4pWRICBcMDMzWzMyOzFtIFvigKJdIEZCICAgICAgOiBBbnNha3UgS3VuICAgICAgICAgICAgICAgICAgICBcMDMzWzMzOzFtIOKVkQpcMDMzWzMzOzFt4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAgIApcMDMzWzE7MzBtPOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFtcMDMzWzE7MzM7NDFtIOKAoiBcMDMzWzE7MzdtIE1BSU4gTUVOVSAgXDAzM1sxOzMzbeKAoiBcMDMzWzBtXDAzM1sxOzMwbV3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZA+CgpcMDMzWzE7OTdt4p6jMS4gQnVhdCBFbWFpbCBSYW5kb20K4p6jMi4gQnVhdCBFbWFpbCBDdXN0b20gCuKeozMuIENlayBVcGRhdGUgCuKeozQuIEtlbHVhcgoiIiIpCgoJcGlsID0gaW5wdXQoIuKepeKepeKeoyBQaWxpaDogIikKCXdoaWxlIHBpbCA9PSAiIiBvciBub3QgcGlsLmlzZGlnaXQoKToKCQlwaWwgPSBpbnB1dCgi4p6l4p6l4p6jIFBpbGloOiAiKQoJaWYgcGlsIGluIFsiMDEiLCIxIl06CgkJc2V0X25hbWUsIHNldF9lbWFpbCA9IGdldF9yYW5kb20oMTApCgkJcHJpbnQoIlxuWz5dIEVtYWlsTXU6ICIrc2V0X25hbWUrIkAiK3NldF9lbWFpbCkKCQlwcmludCgiWz5dIENUUkwrIEMgVW50dWsgU3RvcC4uIikKCQlwcmludCgiLSIqNDUpCgkJcnVuKHNldF9uYW1lKyJAIitzZXRfZW1haWwpCgllbGlmIHBpbCBpbiBbIjAyIiwiMiJdOgoJCXNldF9uYW1lID0gaW5wdXQoIls+XSBCdWF0IG5hbWEgZW1haWw6ICIpCgkJcHJpbnQoKQoJCWZvciBjeSBpbiBsaXN0X21haWw6CgkJCW51bSArPSAxCgkJCXByaW50KCIgIio1LCJbIitzdHIobnVtKSsiXSBAIitjeSkKCQlwcmludCgpCgkJc2V0X2VtYWlsID0gaW5wdXQoIuKepeKepeKeoyBQaWxpaDogIikKCQl3aGlsZSBzZXRfZW1haWwgPT0gIiIgb3Igbm90IHNldF9lbWFpbC5pc2RpZ2l0KCkgb3IgaW50KHNldF9lbWFpbCkgPiBsZW4obGlzdF9tYWlsKToKCQkJc2V0X2VtYWlsID0gaW5wdXQoIuKepeKepeKeoyBQaWxpaDogIikKCQltYWlsID0gbGlzdF9tYWlsW2ludChzZXRfZW1haWwpLTFdCgkJcHJpbnQoIlxuWz5dIEVtYWlsbXU6ICIrc2V0X25hbWUrIkAiK21haWwpCgkJcHJpbnQoIls+XSBDVFJMKyBDIFVudHVrIFN0b3AuLiIpCgkJcHJpbnQoIi0iKjQ1KQoJCXJ1bihzZXRfbmFtZSsiQCIrbWFpbCkKCWVsaWYgcGlsIGluIFsiMDMiLCIzIl06CgkJdHJ5OgoJCQl2ZXJzaSA9IG9wZW4oIl9fdmVyc2lvbl9fIiwiciIpLnJlYWQoKS5zdHJpcCgpCgkJZXhjZXB0OgoJCQlwcmludCgiWyFdIFRpZGFrIGFkYSB1cGRhdGUuLiIpCgkJCXNsZWVwKDIpCgkJCW1haW4oKQoJCXByaW50KCJbIV0gVHVuZ2d1IFNlYmVudGFyIikKCQljZWtfdXBkYXRlKHZlcnNpKQoJZWxpZiBwaWwgaW4gWyIwNCIsIjQiXToKCQlleGl0KCJbPV0gS2VsdWFyLCBqYW5nYW4gbHVwYSBuZ29waVxuIikKCWVsc2U6CgkJZXhpdCgiWy1dIE1lbnUgdGlkYWsgdGVyc2VkaWEsIGtlbHVhci4uXG4iKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CgltYWluKCkK'))